import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Supplier;

public class MethodReferencesTest {
	
	
	public static <T ,SOURCE extends Collection<T>,DEST extends Collection<T>> DEST transferElements(SOURCE sourceCollection,Supplier<DEST> collectionFactory) {
		
		DEST result = collectionFactory.get();
		for(T t: sourceCollection)
		{
			result.add(t);
			
			
		}
		return result;
	}
	
	public static void main(String[] args) {
		
		List<Person> roster = Person.createRoster();
		for(Person p: roster)
		{
			
			
			p.printPerson();
		}
		
		Person[] rosterAsArray = roster.toArray(new Person[roster.size()]);
		
		class PersonAgeComparator implements Comparator<Person>
		{

			@Override
			public int compare(Person a, Person b) {
				
				return a.getBirthday().compareTo(b.getBirthday());
			}
			
			
		}
		
		
		//Without method refernce
		
		Arrays.sort(rosterAsArray,new PersonAgeComparator());
		
		//With lambda expression
		System.out.println("*************************************");
		Arrays.sort (rosterAsArray,(Person a, Person b) ->{
			
			return a.getBirthday().compareTo(b.getBirthday());
		});
		
		//with method reference
		
		Arrays.sort(rosterAsArray, Person::compareByAge);
		
		
		//Reference to an instance method of particular object
		
		class ComparisonProvider {
			
			public int compareByName(Person a,Person b)
			{
				return a.getName().compareTo(b.getName());
				
			}
			
			public int compareByAge(Person a,Person b)
			{
				
				return a.getBirthday().compareTo(b.getBirthday());
			}
			
			
			
		}
		ComparisonProvider myComparisionProvider = new ComparisonProvider();
		Arrays.sort(rosterAsArray,myComparisionProvider::compareByName);
		
		//refernce to an instance method of an arbitary object of a particular type
		
		String[] stringArray = {"Barbara" ,"James" ,"Mary" ,"John" ,"Patrica" ,"Robert" ," Michela","Linda"};
		System.out.println("********************************************************");
		Arrays.sort(stringArray,String::compareToIgnoreCase);
		for (String string : stringArray) {
			
			System.out.println(string);
		}
		Set<Person> rosterSetLambda = transferElements(roster,() -> {return new HashSet<>();});
		
		Set<Person> rosterSet = transferElements(roster, HashSet::new);
		
		System.out.println("Printing roster set");
		rosterSet.stream().forEach(p -> p.printPerson());
		
		
	}
	

}
