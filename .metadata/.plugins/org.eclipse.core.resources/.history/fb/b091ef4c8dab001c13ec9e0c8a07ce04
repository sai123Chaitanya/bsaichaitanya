package deckcard;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

public class StandardDeck implements Deck {
	
	private List<Card> entireDeck;
	public StandardDeck(List<Card> existingList)
	{
		this.entireDeck =existingList;
	}
	
	public StandardDeck()
	{
		this.entireDeck = new ArrayList<Card>();
		for(Card.Suit s :Card.Suit.values())
		{
			
			for(Card.Rank r :Card.Rank.values())
			{
				this.entireDeck.add(new PlayingCard(r, s));
			}
		}
		
		
		
	}
	
	
	@Override
	public List<Card> getCards() {
		return entireDeck;
		
	}

	@Override
	public Deck deckFactory() {
		
		return new StandardDeck(new ArrayList<Card>());
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return entireDeck.size();
	}
	
	
	public void addcard(Card card) {
		entireDeck.add(card);
		
	}

	@Override
	public void addCards(List<Card> cards) {
		entireDeck.addAll(cards);
		
	}

	@Override
	public void addDeck(Deck deck) {
		List<Card> listToAdd = deck.getCards();
		entireDeck.addAll(listToAdd);
		
	}

	@Override
	public void shuffle() {
		Collections.shuffle(entireDeck);
		
	}

	@Override
	public void sort() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void sort(Comparator<Card> c) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public String deckToString() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<Integer, Deck> deal(int players, int numberOfCards) throws IllegalArgumentException {
		int cardsDealt = players * numberOfCards;
		int sizeOfDeck = entireDeck.size();
		if(cardsDealt > sizeOfDeck)
		{
			
			
			throw new IllegalArgumentException("Number of Players( " + players + ") times number of cards to be dealt(" +numberOfCards +") is greater than number of cards in deck (" + sizeOfDeck + ").");
		}
		
	}
	
	
	

}
