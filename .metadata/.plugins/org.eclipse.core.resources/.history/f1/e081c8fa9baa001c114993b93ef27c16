import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;

import org.omg.CORBA.PUBLIC_MEMBER;

public class RosterTest {
	
	
	interface CheckPerson
	{
		
		boolean test(Person p);
		
	}
	
	// aaproach :create method that searches for Persons tht matches one charateristic
	public static void printPersonsOlderThan(List<Person> roster,int age) {
		
		for(Person p: roster)
		{
			
			
			if(p.getAge() >= age)
			{
				p.printPerson();
				
			}
		}
		
	}
	
	
	
	//more generalized search method
	public static void printPersonsWithinAgeRange(List<Person> roster,int low,int high)
	{
		for(Person p: roster)
		{
			
			if(low<= p.getAge() && p.getAge() <high)
			{
				
				
				p.printPerson();
			}
		}
	}
	
	
	
	
	// specify search criteria code in local class
	//specify search criteria code in anaonymous class
	//specify search criteria code with lambda expression
	
	public static void printPersons(List<Person> roster,CheckPerson tester) {
		for(Person p:roster)
		{
			if(tester.test(p))
				p.printPerson();
		}
		
		
	}
	
	
	
	
	//Standard functional interface with lambda expression
	
	public static void printPersonsWithPredicate(List<Person> roster,Predicate<Person> tester)
	{
		
		for(Person p: roster)
		{
			if(tester.test(p))
			{
				
				p.printPerson();
			}
		}
	}

	
	
	//use lambda expression throught your application
	
	public static void processPersons(List<Person> roster,Predicate<Person> tester,Consumer<Person> block) {
		for(Person p:roster)
		{
			if(tester.test(p))
			{
				
				block.accept(p);
			}
		}
	}
	
	
	public static void processPersonsWithFunction(List<Person> roster,Predicate<Person> tester,Function<Person,string> mapper,Consumer<String> block) {
		
		for(Person p:roster)
		{
			
			if(tester.test(p))
			{
				String data = mapper.apply(p);
				block.accept(data);
			}
		}
		
	}
	
	
	//use generics more extensively
	public static<X,Y> void processElements(Iterable<X> source,Predicate<X> tester,Function<X,Y> mapper,Consumer<Y> block) {
	
		for(X p:source)
		{
			if(tester.test(p))
			{
				Y data = mapper.apply(p);
				block.accept(data);
			}
		}
		
	}
	
	public static void main(String[] args) {
		
		List<Person> roster = Person.createRoster();
		
		for(Person p: roster)
		{
			
			p.printPerson();
		}
		//create method that searches for person that matches one characteristic
		
		System.out.println("Person older than 20");
		printPersonsOlderThan(roster, 20);
		System.out.println();
		
		//create more generalised search methods
		
		System.out.println("Person between ages of 14 and 30");
		printPersonsWithinAgeRange(roster, 14, 30);
		System.out.println();
		
		
		//specify search criteria code in local class
		
		System.out.println("Person who are eligble for selective service");
		
		
		class CheckPersonEligibleForSelectiveService implements CheckPerson
		{
			
			public boolean test(Person p)
			{
				
				
				return p.getGender() == Person.Sex.MALE && p.getAge() >=18 && p.getAge() <=25;
			}
		}
		
		
		printPersons(roster, new CheckPersonEligibleForSelectiveService());
		
		System.out.println();
		
		//speicfy search criteria code in anonymous class
		
		System.out.println("Person who are elgible for selective service" + "(anonymous class):");
		
		printPersons(roster, new CheckPerson()
				{
			public boolean test(Person p)
			{
				return p.getGender() == Person.Sex.MALE && p.getAge() >=18 && p.getAge() <=25;
			}
			
			
			
				});
		
		System.out.println();
		
		
		//specify search criteria code with lambda expression
		
		System.out.println("Persons who are eligible for selective service" + "(lambda expression):");
		
		printPersons(roster,(Person p) -> p.getGender() == Person.Sex.MALE && p.getAge()>=18 && p.getAge() <=25);
		
		System.out.println();
		
		
		// use standard function interfaces with lambda expression
		 System.out.println("Person who are eligible for selective serice" + "(with Predicate parameter):");
		 
		 printPersonsWithPredicate(roster,p -> p.getGender() == Person.Sex.MALE && p.getAge() >=18 && p.getAge() <=25);
		 
		 System.out.println();
		 
		 //use lambda expression throught your application
		 
		 System.out.println("Perosn who are eligible for selective service" + "(with Predicate and consumer paramaters):");
		 
		 processPersons(roster, p-> p.getGender() == Person.Sex.MALE && p.getAge() >=18 && p.getAge() <=25,p ->p.printPerson());
		 
		 
		 System.out.println();
		 
		 
		 
		 System.out.println("persons who are eleigible for selective service" + "(with Predicate, Functiona and Consumer parameters):");
		 
		 processPersonswithFunction(roster,p-> p.getGender()==Person.Sex.MALE && p.getAge() >=18 && p.getAge()<=25,p.getEmailAddress(),email ->  system.out.println(email));
		 
		System.out.println();
		
		//use generics more extensively
		
		processElements(roster, p->p.getGender() == Person.Sex.MALE && p.getAge()>=18 && p.getAge() <=25, p -> p.getEmailAddress(),email -> System.out.println(email));
		
		System.out.println();
		
		
		// use bulk data operation that accept lambda expressions as parameters
		
		System.out.println("Person who are eligble for selective service" + "(with bulk data operations):");
		
		
		roster.stream().filter(p-> p.getGender() >= 18 && p.getAge() <=25).map(p -> p.getEmailAddress()).forEach(email -> Sytstem.out.println(email));
		
		
		
		
		
	}
}
	
	

	


